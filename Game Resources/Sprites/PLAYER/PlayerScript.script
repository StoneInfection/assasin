local move_acceleration = 3500
local air_acceleration_factor = 0.8
local max_speed = 250
local gravity = -1000
local jump_takeoff_speed = 400


local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local ship = hash("ship")

local anim_run = hash("Run")
local anim_idle = hash("Idle")
local anim_jump = hash("Jump")
local anim_fall = hash("Jump")
local anim_attack = hash("ANIMAttack")

local idle = hash("STATE_IDLE")
local walk = hash("STATE_WALK")
local isAttack = hash("STATE_ATTACK")

function init(self)
    msg.post(".", "acquire_input_focus")

    self.velocity = vmath.vector3(0, 0, 0)
    self.correction = vmath.vector3()
    self.ground_contact = false
    self.move_input = 0
    self.move_idle = 0
    self.anim = nil
    self.state = idle
    self.previous_state = nil
    self.enter = false
    self.hp_player = 100
end

local function play_animation(self, anim)
    
    if self.anim ~= anim and anim ~= nil then
        sprite.play_flipbook("#Player", anim)
        self.anim = anim
    end
    
end

local function update_animations(self)
    sprite.set_hflip("Player", self.move_input < 0)

    if self.ground_contact then
        if self.velocity.x == 0 then
            if self.isAttacking and self.move_idle == 0 then
                play_animation(self, anim_attack)
            elseif self.isAttacking and self.move_idle == 1 then
                sprite.set_hflip("Player", true)
                play_animation(self, anim_attack)
            elseif self.move_idle == 0 then
                play_animation(self, anim_idle)
            elseif self.move_idle == 1 then
                sprite.set_hflip("Player", true)
                play_animation(self, anim_idle)
            end
        else
            play_animation(self, anim_run)
        end
    else
        if self.velocity.y > 0 then
            play_animation(self, anim_jump)
        else
            play_animation(self, anim_fall)
        end
    end
end

function change_state(self)
    
    if self.state == idle then
        if self.move_input ~= 0 then
            self.previous_state = self.state
            self.state = walk
        end
    elseif self.state == isAttack then
        if not self.isAttacking then
            self.state = idle
        end
    elseif self.state == walk then
        if self.move_input == 0 then
            self.previous_state = self.state
            self.state = idle
        end
    end
end

function execute_state(self)
    
    if self.state == walk then
        label.set_text("Debug#Text", "walk")
    elseif self.state == idle then
        label.set_text("Debug#Text", "idle")
    elseif self.state == isAttack then
        label.set_text("Debug#Text", "attack")
    end
    
    update_animations(self)
    change_state(self)
end

function update(self, dt)
    local target_speed = self.move_input * max_speed
    local speed_diff = target_speed - self.velocity.x
    local acceleration = vmath.vector3(0, gravity, 0)

    if speed_diff ~= 0 then
        if speed_diff < 0 then
            acceleration.x = -move_acceleration
        else
            acceleration.x = move_acceleration
        end
        if not self.ground_contact then
            acceleration.x = air_acceleration_factor * acceleration.x
        end
    end
    
    local dv = acceleration * dt
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    
    local v0 = self.velocity
    self.velocity = self.velocity + dv
    local dp = (v0 + self.velocity) * dt * 0.5

    execute_state(self)

    go.set_position(go.get_position() + dp)

    self.correction = vmath.vector3()
    self.move_input = 0
    self.ground_contact = false

end

local function handle_obstacle_contact(self, normal, distance)
    local proj = vmath.dot(self.correction, normal)
    local comp = (distance - proj) * normal
    self.correction = self.correction + comp
    go.set_position(go.get_position() + comp)
    
    if normal.y > 0.7 then
        self.ground_contact = true
    end
    
    proj = vmath.dot(self.velocity, normal)
    if proj < 0 then
        self.velocity = self.velocity - proj * normal
    end
    
end

local function jump(self)
    
    if self.ground_contact then
        self.velocity.y = jump_takeoff_speed
        update_animations(self)
    end
    
end

local function abort_jump(self)
    
    if self.velocity.y > 0 then
        self.velocity.y = self.velocity.y * 0.5
    end
    
end

function on_message(self, message_id, message, sender)
    
    if message_id == msg_contact_point_response then
        if message.group == group_obstacle then
            handle_obstacle_contact(self, message.normal, message.distance)
        end
    end
    
    if message_id == msg_contact_point_response then
        if message.ship == ship then
            self.hp_player =  self.hp_player - 10
            print(self.hp_player)
        end
    end
    
    if message_id == hash("trigger_response") then
        if message.enter then
            self.enter = true
            print("OK3")
        else
            self.enter = false
        end
    end
    
end

function on_input(self, action_id, action)
    
    if action_id == hash("Left") then
        self.move_input = -action.value
        self.move_idle = 1
    elseif action_id == hash("Right") then
        self.move_input = action.value
        self.move_idle = 0
    elseif action_id == hash("Jump") then
        if action.pressed then
            jump(self)
        elseif action.released then
            abort_jump(self)
        end
    elseif action_id == hash("Attack") then
        if action.repeated then
            self.state = isAttack
            self.isAttacking = true
            if self.enter == true then
                self.crete_chance = math.random(1, 6)
                if self.crete_chance == 1 then
                    msg.post('/Mob/MOB#Mob', '1')
                    print(self.crete_chance)
                else
                    msg.post('/Mob/MOB#Mob', '2')
                end
            end
            if self.enter == true then
                msg.post('/Mob/MOB#Mob', 'yahoo')
            end

                
           
        elseif action.released then
            self.isAttacking = false
        end
    end
    
end

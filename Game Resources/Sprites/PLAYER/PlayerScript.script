local move_acceleration = 3500 
local air_acceleration_factor = 0.8 
local max_speed = 250 
local gravity = -1000 
local jump_takeoff_speed = 400 
local touch_jump_timeout = 0.2 

local msg_contact_point_response = hash("contact_point_response") 
local msg_animation_done = hash("animation_done") 
local group_obstacle = hash("ground") 

local input_left = hash("Left") 
local input_right = hash("Right") 
local input_jump = hash("Jump") 
local input_attack = hash("Attack") 
local input_touch = hash("touch") 

local anim_run = hash("Run") 
local anim_idle = hash("Idle") 
local anim_jump = hash("Jump") 
local anim_fall = hash("Jump") 
local anim_attack = hash("ANIMAttack") 

local idle = hash("STATE_IDLE") 
local walk = hash("STATE_WALK") 
local jump = hash("STATE_JUMP") 
local isAttack = hash("STATE_ATTACK") 

local state, previous_state 
local isAttacking = false 

function init(self) 
	msg.post(".", "acquire_input_focus") 

	self.velocity = vmath.vector3(0, 0, 0) 
	self.correction = vmath.vector3() 
	self.ground_contact = false 
	self.move_input = 0 
	self.anim = nil 
	self.touch_jump_timer = 0 
	self.state = idle 
	self.previous_state = nil 
end 

-- function endofanimation(self) 
-- 	if self.anim ~= anim_attack then 
-- 		self.isAttacking = false 
-- 	end 
-- end 

local function play_animation(self, anim) 
	if self.anim ~= anim and anim ~= nil then 
		sprite.play_flipbook("#Player", anim) 
		self.anim = anim 
	end 
end 

local function update_animations(self) 
	sprite.set_hflip("Player", self.move_input < 0) 

	if self.ground_contact then 
		if self.velocity.x == 0 then 
			if self.isAttacking then
				play_animation(self, anim_attack)
			else
				play_animation(self, anim_idle)
			end
		else 
			play_animation(self, anim_run) 
		end 
	else 
		if self.velocity.y > 0 then 
			play_animation(self, anim_jump) 
		else 
			play_animation(self, anim_fall) 
		end 
	end 
end 

function ChangeState(self, state) 
	if state == idle then 
		if self.move_input ~= 0 then 
			self.previous_state = state 
			self.state = walk 
		end 
		-- if self.isAttacking then 
		-- 	self.state = isAttack 
		-- end 
	elseif state == isAttack then 
		if self.move_input == 0 then 
			print('ATTACK')
		end
		if not self.isAttacking then 
			self.state = idle 
		end 
	elseif state == walk then 
		if self.move_input == 0 then 
			self.previous_state = state 
			self.state = idle 
		end 
	end 
end 

function attack(self) 
	update_animations(self) 
end 

function ExecuteState(self, state) 
	if state == walk then 
		label.set_text("Debug#Text", "walk") 
		update_animations(self) 
	elseif state == idle then 
		label.set_text("Debug#Text", "idle") 
		play_animation(self, anim_idle) 
	elseif state == isAttack then 
		label.set_text("Debug#Text", "attack") 
		attack(self) 
	end 
	ChangeState(self, state) 
end 

function update(self, dt) 
	local target_speed = self.move_input * max_speed 
	local speed_diff = target_speed - self.velocity.x 
	local acceleration = vmath.vector3(0, gravity, 0) 
	if speed_diff ~= 0 then 
		if speed_diff < 0 then 
			acceleration.x = -move_acceleration 
		else 
			acceleration.x = move_acceleration 
		end 
		if not self.ground_contact then 
			acceleration.x = air_acceleration_factor * acceleration.x 
		end 
	end 
	local dv = acceleration * dt 
	if math.abs(dv.x) > math.abs(speed_diff) then 
		dv.x = speed_diff 
	end 
	local v0 = self.velocity 
	self.velocity = self.velocity + dv 
	local dp = (v0 + self.velocity) * dt * 0.5 

	ExecuteState(self, self.state) 

	go.set_position(go.get_position() + dp) 

	if self.touch_jump_timer > 0 then 
		self.touch_jump_timer = self.touch_jump_timer - dt 
	end 

	update_animations(self) 

	self.correction = vmath.vector3() 
	self.move_input = 0 
	self.ground_contact = false 

end 

local function handle_obstacle_contact(self, normal, distance) 
	local proj = vmath.dot(self.correction, normal) 
	local comp = (distance - proj) * normal 
	self.correction = self.correction + comp 
	go.set_position(go.get_position() + comp) 
	if normal.y > 0.7 then 
		self.ground_contact = true 
	end 
	proj = vmath.dot(self.velocity, normal) 
	if proj < 0 then 
		self.velocity = self.velocity - proj * normal 
	end 
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then 
		if message.group == group_obstacle then 
			handle_obstacle_contact(self, message.normal, message.distance) 
		end 
	end 
end 

local function jump(self) 
	if self.ground_contact then 
		self.velocity.y = jump_takeoff_speed 
		play_animation(self, anim_jump) 
	end 
end 

local function abort_jump(self) 
	if self.velocity.y > 0 then 
		self.velocity.y = self.velocity.y * 0.5 
	end 
end 

function on_input(self, action_id, action) 
	if action_id == input_left then 
		self.move_input = -action.value 
	elseif action_id == input_right then 
		self.move_input = action.value 
	elseif action_id == input_jump then 
		if action.pressed then 
			jump(self) 
		elseif action.released then 
			abort_jump(self) 
		end 
	elseif action_id == attack then 
		self.isAttacking = true 
	elseif action_id == input_touch then 
		local diff = action.x - go.get_position().x 
		if math.abs(diff) > 10 then 
			self.move_input = diff / 100 
			self.move_input = math.min(1, math.max(-1, self.move_input)) 
		end 
		if action.released then 
			self.touch_jump_timer = touch_jump_timeout 
		elseif action.pressed then 
			if self.touch_jump_timer > 0 then 
				jump(self) 
			end 
		end 
	end 
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then 
		if message.group == group_obstacle then 
			handle_obstacle_contact(self, message.normal, message.distance) 
		end 
	end 
end 

local function jump(self) 
	if self.ground_contact then 
		self.velocity.y = jump_takeoff_speed 
		play_animation(self, anim_jump) 
	end 
end 

local function abort_jump(self) 
	if self.velocity.y > 0 then 
		self.velocity.y = self.velocity.y * 0.5 
	end 
end 

function on_input(self, action_id, action) 
	
	if action_id == input_left then 
		self.move_input = -action.value 
	elseif action_id == input_right then 
		self.move_input = action.value 
	elseif action_id == input_jump then 
		if action.pressed then 
			jump(self) 
		elseif action.released then 
			abort_jump(self) 
		end 
	elseif action_id == input_attack then 
		if action.pressed then 
			self.state = isAttack
			self.isAttacking = true  
		elseif action.released then 
			self.isAttacking = false 
		end 
		
	elseif action_id == input_touch then 
		local diff = action.x - go.get_position().x 
		if math.abs(diff) > 10 then 
			self.move_input = diff / 100 
			self.move_input = math.min(1, math.max(-1, self.move_input)) 
		end 
		if action.released then 
			self.touch_jump_timer = touch_jump_timeout 
		elseif action.pressed then 
			if self.touch_jump_timer > 0 then 
				jump(self) 
			end 
		end 
	end 
end